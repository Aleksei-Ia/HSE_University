# -*- coding: utf-8 -*-
"""client

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PweRJ7emVLmgUb6gGsl5x5r1sXLSIecD
"""

import asyncio
import httpx
import random
import time

BASE_URL = "http://127.0.0.1:8000/api/v1/models"

# Данные для обучения
DATASET_1 = {
    "X": [[random.uniform(0, 1) for _ in range(2)] for _ in range(1000)],
    "y": [random.uniform(0, 1) for _ in range(1000)]
}

DATASET_2 = {
    "X": [[random.uniform(0, 1) for _ in range(3)] for _ in range(1000)],
    "y": [random.uniform(0, 1) for _ in range(1000)]
}

async def train_model(client, model_id, dataset, ml_model_type="linear"):
    response = await client.post(
        f"{BASE_URL}/fit",
        json={
            "X": dataset["X"],
            "y": dataset["y"],
            "config": {
                "id": model_id,
                "ml_model_type": ml_model_type,
                "hyperparameters": {"fit_intercept": True}
            }
        }
    )
    print(f"Train Response ({model_id}):", response.json())

async def load_model(client, model_id):
    response = await client.post(
        f"{BASE_URL}/load",
        json={"id": model_id}
    )
    print(f"Load Response ({model_id}):", response.json())

async def predict(client, model_id, X):
    response = await client.post(
        f"{BASE_URL}/predict",
        json={"id": model_id, "X": X}
    )
    print(f"Predict Response ({model_id}):", response.json())

async def list_models(client):
    response = await client.get(f"{BASE_URL}/list_models")
    print("List Models Response:", response.json())

async def remove_all(client):
    response = await client.delete(f"{BASE_URL}/remove_all")
    print("Remove All Response:", response.json())

async def main():
    async with httpx.AsyncClient() as client:
# Обучение двух моделей
        start_time = time.time()
        await train_model(client, "model_1", DATASET_1)
        await train_model(client, "model_2", DATASET_2)
        print(f"Training took {time.time() - start_time:.2f} seconds")

# Загрузка и предсказание для моделей
        await load_model(client, "model_1")
        await predict(client, "model_1", [[0.1, 0.2], [0.3, 0.4]])

        await load_model(client, "model_2")
        await predict(client, "model_2", [[0.5, 0.6, 0.7], [0.8, 0.9, 1.0]])

# Получение списка моделей
        await list_models(client)

# Удаление всех моделей
        await remove_all(client)

if __name__ == "__main__":
    asyncio.run(main())